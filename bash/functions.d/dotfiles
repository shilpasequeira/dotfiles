#!/usr/bin/env bash

##
# Allows to edit, reload and update the dotfiles
# Params: cd|install|link|path|fetch|relative-path|reload|update
#
dotfiles() {
  _dotfiles_backup() {
    if [[ -e "$1" && ! -L "$1" ]]; then
      mv "$1" "$1.`date '+%Y%m%d%H%M%S'`"
    fi
  }

  case $1 in
    cd)
      cd $(dotfiles path)
    ;;

    reload)
      DOTFILES_SHOULD_LOAD_ENV=true
      source ~/.bash_profile
    ;;

    fetch)
      (
        dotfiles cd
        git pull --quiet
        git submodule update --quiet --init --recursive
      )
    ;;

    update)
      dotfiles fetch
      dotfiles reload
    ;;

    install)
      dotfiles fetch
      dotfiles link
      dotfiles reload
    ;;

    link)
      (
        relative_path=$(dotfiles relative-path)

        if [[ -n $relative_path && $relative_path != "/" ]]; then
          cd

          for resource in "$relative_path"/*; do
            local resource_basename=$(basename "$resource")
            [[ "$resource_basename" == webinstall ]] && continue
            if [[ -f ".$resource_basename" || -d ".$resource_basename" ]]; then
              _dotfiles_backup ".$resource_basename"
            fi
            ln -Ffs "$relative_path/$resource_basename" ".$resource_basename"
          done
        else
          echo "Source directory could not be determined reliably." 1>&2
        fi
      )
    ;;

    path)
      expand_path "$(dirname ${BASH_SOURCE[0]})/../.."
    ;;

    relative-path)
      relative_path "$(cd; pwd -P)" "$(dotfiles path)"
    ;;

    *)
      echo "Usage: dotfiles cd|fetch|install|link|path|relative-path|reload|update"
    ;;
  esac

  unset _dotfiles_backup
}

##
# Bash completion for dotfiles function
_dotfiles() {
  local cur cword
  _get_comp_words_by_ref cur cword

  [[ $cword > 1 ]] && return 0

  COMPREPLY=( $(compgen -W "cd fetch install link path relative-path reload update" -- $cur) )
}
complete -F _dotfiles dotfiles

